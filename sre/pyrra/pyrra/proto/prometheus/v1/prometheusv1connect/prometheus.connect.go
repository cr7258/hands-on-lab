// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: prometheus/v1/prometheus.proto

package prometheusv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pyrra-dev/pyrra/proto/prometheus/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrometheusServiceName is the fully-qualified name of the PrometheusService service.
	PrometheusServiceName = "prometheus.v1.PrometheusService"
)

// PrometheusServiceClient is a client for the prometheus.v1.PrometheusService service.
type PrometheusServiceClient interface {
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	QueryRange(context.Context, *connect_go.Request[v1.QueryRangeRequest]) (*connect_go.Response[v1.QueryRangeResponse], error)
}

// NewPrometheusServiceClient constructs a client for the prometheus.v1.PrometheusService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrometheusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrometheusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &prometheusServiceClient{
		query: connect_go.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+"/prometheus.v1.PrometheusService/Query",
			opts...,
		),
		queryRange: connect_go.NewClient[v1.QueryRangeRequest, v1.QueryRangeResponse](
			httpClient,
			baseURL+"/prometheus.v1.PrometheusService/QueryRange",
			opts...,
		),
	}
}

// prometheusServiceClient implements PrometheusServiceClient.
type prometheusServiceClient struct {
	query      *connect_go.Client[v1.QueryRequest, v1.QueryResponse]
	queryRange *connect_go.Client[v1.QueryRangeRequest, v1.QueryRangeResponse]
}

// Query calls prometheus.v1.PrometheusService.Query.
func (c *prometheusServiceClient) Query(ctx context.Context, req *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// QueryRange calls prometheus.v1.PrometheusService.QueryRange.
func (c *prometheusServiceClient) QueryRange(ctx context.Context, req *connect_go.Request[v1.QueryRangeRequest]) (*connect_go.Response[v1.QueryRangeResponse], error) {
	return c.queryRange.CallUnary(ctx, req)
}

// PrometheusServiceHandler is an implementation of the prometheus.v1.PrometheusService service.
type PrometheusServiceHandler interface {
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	QueryRange(context.Context, *connect_go.Request[v1.QueryRangeRequest]) (*connect_go.Response[v1.QueryRangeResponse], error)
}

// NewPrometheusServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrometheusServiceHandler(svc PrometheusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/prometheus.v1.PrometheusService/Query", connect_go.NewUnaryHandler(
		"/prometheus.v1.PrometheusService/Query",
		svc.Query,
		opts...,
	))
	mux.Handle("/prometheus.v1.PrometheusService/QueryRange", connect_go.NewUnaryHandler(
		"/prometheus.v1.PrometheusService/QueryRange",
		svc.QueryRange,
		opts...,
	))
	return "/prometheus.v1.PrometheusService/", mux
}

// UnimplementedPrometheusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrometheusServiceHandler struct{}

func (UnimplementedPrometheusServiceHandler) Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("prometheus.v1.PrometheusService.Query is not implemented"))
}

func (UnimplementedPrometheusServiceHandler) QueryRange(context.Context, *connect_go.Request[v1.QueryRangeRequest]) (*connect_go.Response[v1.QueryRangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("prometheus.v1.PrometheusService.QueryRange is not implemented"))
}
