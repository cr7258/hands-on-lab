apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: sqls.example.com
spec:
  group: example.com
  names:
    kind: SQL
    plural: sqls
  claimNames:
    kind: SQLClaim
    plural: sqlclaims
  versions:
  - name: v1alpha1
    served: true
    referenceable: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              parameters:
                type: object
                properties:
                  version:
                    description: The DB version depends on the DB type and versions available in the selected provider.
                    type: string
                  size:
                    description: "Supported sizes: small, medium, large"
                    type: string
                    default: small
                  database:
                    description: The database to create inside the DB server.
                    type: string
                  schema:
                    description: The SQL to apply the database schema.      
                    type: string
                required:
                - version
                - database
                - schema
            required:
            - parameters
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: gcp-postgresql
  labels:
    provider: gcp
    db: postgresql
spec:
  compositeTypeRef:
    apiVersion: example.com/v1alpha1
    kind: SQL
  mode: Pipeline
  pipeline:
  - step: patch-and-transform
    functionRef:
      name: crossplane-contrib-function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: databaseinstance
        base:
          apiVersion: sql.gcp.upbound.io/v1beta1
          kind: DatabaseInstance
          spec:
            providerConfigRef:
              name: providerconfig-gcp-sql
            forProvider:
              # databaseVersion: POSTGRES_13
              region: us-central1
              settings:
              - diskSize: 20
                # tier: db-custom-1-3840
                ipConfiguration:
                - ipv4Enabled: true
                  authorizedNetworks:
                  - name: all
                    value: 0.0.0.0/0
              deletionProtection: false   
            # writeConnectionSecretToRef:
              # name: example-sql-connection-secret
              # namespace: team-a / team-b
        patches:
        - type: CombineFromComposite
          combine:
            variables:
            - fromFieldPath: spec.claimRef.namespace
            - fromFieldPath: spec.claimRef.name
            strategy: string
            string:
              fmt: "%s-%s-instance"
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.databaseVersion
          transforms:
          - type: string
            string:
              fmt: POSTGRES_%s
              type: Format
        - fromFieldPath: spec.parameters.size
          toFieldPath: spec.forProvider.settings[0].tier
          transforms:
          - type: map
            map:
              small: db-custom-1-3840
              medium: db-custom-2-7680
              large: db-custom-4-15360
        - fromFieldPath: spec.claimRef.name
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
          - type: string
            string:
              fmt: "%s-connection-secret"
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
      - name: user
        base:
          apiVersion: sql.gcp.upbound.io/v1beta1
          kind: User
          spec:
            providerConfigRef:
              name: providerconfig-gcp-sql
            forProvider:
              instanceSelector:
                matchControllerRef: true
              passwordSecretRef:
                key: password
                name: example-sql-password
                # namespace: team-a / team-b
        patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
        - fromFieldPath: spec.claimRef.name
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
          transforms:
          - type: string
            string:
              fmt: "%s-user"
              type: Format
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: spec.forProvider.passwordSecretRef.namespace
      - name: database
        base:
          apiVersion: sql.gcp.upbound.io/v1beta1
          kind: Database
          spec:
            providerConfigRef:
              name: providerconfig-gcp-sql
            forProvider:
              instanceSelector:
                matchControllerRef: true
        patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.database
          toFieldPath: metadata.annotations["crossplane.io/external-name"]
  - step: schema
    functionRef:
      name: crossplane-contrib-function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.metadata.name }}-schema-{{ $.observed.composite.resource.spec.parameters.database }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.metadata.name }}-schema-{{ $.observed.composite.resource.spec.parameters.database }}
          spec:
            providerConfigRef:
              name: providerconfig-kubernetes
            forProvider:
              manifest:
                apiVersion: db.atlasgo.io/v1alpha1
                kind: AtlasSchema
                metadata:
                  name: {{ $.observed.composite.resource.metadata.name }}-{{ $.observed.composite.resource.spec.parameters.database }}
                  namespace: {{ $.observed.composite.resource.spec.claimRef.namespace }}
                spec:
                  credentials:
                    scheme: postgres
                    hostFrom:
                      secretKeyRef:
                        key: publicIP
                        name: {{ $.observed.composite.resource.spec.claimRef.name }}-connection-secret
                    port: 5432
                    user: {{ $.observed.composite.resource.spec.claimRef.name }}-user
                    passwordFrom:
                      secretKeyRef:
                        key: password
                        name: example-sql-password
                    database: {{ $.observed.composite.resource.spec.parameters.database }}
                    parameters:
                      sslmode: disable
                  schema: 
                    sql: "{{ $.observed.composite.resource.spec.parameters.schema }}"
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: crossplane-contrib-function-auto-ready
